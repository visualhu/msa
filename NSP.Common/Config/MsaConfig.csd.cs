//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace NSP.Common.Config
{
    
    
    /// <summary>
    /// The MsaConfiguration Configuration Section.
    /// </summary>
    public partial class MsaConfiguration : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the MsaConfiguration Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string MsaConfigurationSectionName = "msaConfiguration";
        
        /// <summary>
        /// The XML path of the MsaConfiguration Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string MsaConfigurationSectionPath = "msaConfiguration";
        
        /// <summary>
        /// Gets the MsaConfiguration instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public static global::NSP.Common.Config.MsaConfiguration Instance
        {
            get
            {
                return ((global::NSP.Common.Config.MsaConfiguration)(global::System.Configuration.ConfigurationManager.GetSection(global::NSP.Common.Config.MsaConfiguration.MsaConfigurationSectionPath)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::NSP.Common.Config.MsaConfiguration.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::NSP.Common.Config.MsaConfiguration.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ApplicationSetting Property
        /// <summary>
        /// The XML name of the <see cref="ApplicationSetting"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string ApplicationSettingPropertyName = "applicationSetting";
        
        /// <summary>
        /// Gets or sets the ApplicationSetting.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ApplicationSetting.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::NSP.Common.Config.MsaConfiguration.ApplicationSettingPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::NSP.Common.Config.ApplicationSettingElement ApplicationSetting
        {
            get
            {
                return ((global::NSP.Common.Config.ApplicationSettingElement)(base[global::NSP.Common.Config.MsaConfiguration.ApplicationSettingPropertyName]));
            }
            set
            {
                base[global::NSP.Common.Config.MsaConfiguration.ApplicationSettingPropertyName] = value;
            }
        }
        #endregion
        
        #region CommandQueue Property
        /// <summary>
        /// The XML name of the <see cref="CommandQueue"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string CommandQueuePropertyName = "commandQueue";
        
        /// <summary>
        /// Gets or sets the CommandQueue.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        [global::System.ComponentModel.DescriptionAttribute("The CommandQueue.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::NSP.Common.Config.MsaConfiguration.CommandQueuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::NSP.Common.Config.MessageQueueConfigurationElement CommandQueue
        {
            get
            {
                return ((global::NSP.Common.Config.MessageQueueConfigurationElement)(base[global::NSP.Common.Config.MsaConfiguration.CommandQueuePropertyName]));
            }
            set
            {
                base[global::NSP.Common.Config.MsaConfiguration.CommandQueuePropertyName] = value;
            }
        }
        #endregion
        
        #region EventQueue Property
        /// <summary>
        /// The XML name of the <see cref="EventQueue"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string EventQueuePropertyName = "eventQueue";
        
        /// <summary>
        /// Gets or sets the EventQueue.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        [global::System.ComponentModel.DescriptionAttribute("The EventQueue.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::NSP.Common.Config.MsaConfiguration.EventQueuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::NSP.Common.Config.MessageQueueConfigurationElement EventQueue
        {
            get
            {
                return ((global::NSP.Common.Config.MessageQueueConfigurationElement)(base[global::NSP.Common.Config.MsaConfiguration.EventQueuePropertyName]));
            }
            set
            {
                base[global::NSP.Common.Config.MsaConfiguration.EventQueuePropertyName] = value;
            }
        }
        #endregion
        
        #region MongoEventStore Property
        /// <summary>
        /// The XML name of the <see cref="MongoEventStore"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string MongoEventStorePropertyName = "mongoEventStore";
        
        /// <summary>
        /// Gets or sets the MongoEventStore.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MongoEventStore.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::NSP.Common.Config.MsaConfiguration.MongoEventStorePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::NSP.Common.Config.MongoEventStoreElement MongoEventStore
        {
            get
            {
                return ((global::NSP.Common.Config.MongoEventStoreElement)(base[global::NSP.Common.Config.MsaConfiguration.MongoEventStorePropertyName]));
            }
            set
            {
                base[global::NSP.Common.Config.MsaConfiguration.MongoEventStorePropertyName] = value;
            }
        }
        #endregion
        
        #region Services Property
        /// <summary>
        /// The XML name of the <see cref="Services"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string ServicesPropertyName = "services";
        
        /// <summary>
        /// Gets or sets the Services.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Services.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::NSP.Common.Config.MsaConfiguration.ServicesPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::NSP.Common.Config.ServiceElementCollection Services
        {
            get
            {
                return ((global::NSP.Common.Config.ServiceElementCollection)(base[global::NSP.Common.Config.MsaConfiguration.ServicesPropertyName]));
            }
            set
            {
                base[global::NSP.Common.Config.MsaConfiguration.ServicesPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace NSP.Common.Config
{
    
    
    /// <summary>
    /// The ApplicationSettingElement Configuration Element.
    /// </summary>
    public partial class ApplicationSettingElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Url Property
        /// <summary>
        /// The XML name of the <see cref="Url"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string UrlPropertyName = "url";
        
        /// <summary>
        /// Gets or sets the Url.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Url.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::NSP.Common.Config.ApplicationSettingElement.UrlPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Url
        {
            get
            {
                return ((string)(base[global::NSP.Common.Config.ApplicationSettingElement.UrlPropertyName]));
            }
            set
            {
                base[global::NSP.Common.Config.ApplicationSettingElement.UrlPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace NSP.Common.Config
{
    
    
    /// <summary>
    /// The MongoEventStoreElement Configuration Element.
    /// </summary>
    public partial class MongoEventStoreElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ConnectionString Property
        /// <summary>
        /// The XML name of the <see cref="ConnectionString"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string ConnectionStringPropertyName = "connectionString";
        
        /// <summary>
        /// Gets or sets the ConnectionString.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ConnectionString.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::NSP.Common.Config.MongoEventStoreElement.ConnectionStringPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string ConnectionString
        {
            get
            {
                return ((string)(base[global::NSP.Common.Config.MongoEventStoreElement.ConnectionStringPropertyName]));
            }
            set
            {
                base[global::NSP.Common.Config.MongoEventStoreElement.ConnectionStringPropertyName] = value;
            }
        }
        #endregion
        
        #region Database Property
        /// <summary>
        /// The XML name of the <see cref="Database"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string DatabasePropertyName = "database";
        
        /// <summary>
        /// Gets or sets the Database.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Database.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::NSP.Common.Config.MongoEventStoreElement.DatabasePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string Database
        {
            get
            {
                return ((string)(base[global::NSP.Common.Config.MongoEventStoreElement.DatabasePropertyName]));
            }
            set
            {
                base[global::NSP.Common.Config.MongoEventStoreElement.DatabasePropertyName] = value;
            }
        }
        #endregion
        
        #region CollectionName Property
        /// <summary>
        /// The XML name of the <see cref="CollectionName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string CollectionNamePropertyName = "collectionName";
        
        /// <summary>
        /// Gets or sets the CollectionName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        [global::System.ComponentModel.DescriptionAttribute("The CollectionName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::NSP.Common.Config.MongoEventStoreElement.CollectionNamePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string CollectionName
        {
            get
            {
                return ((string)(base[global::NSP.Common.Config.MongoEventStoreElement.CollectionNamePropertyName]));
            }
            set
            {
                base[global::NSP.Common.Config.MongoEventStoreElement.CollectionNamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace NSP.Common.Config
{
    
    
    /// <summary>
    /// The MessageQueueConfigurationElement Configuration Element.
    /// </summary>
    public partial class MessageQueueConfigurationElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region ConnectionUri Property
        /// <summary>
        /// The XML name of the <see cref="ConnectionUri"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string ConnectionUriPropertyName = "connectionUri";
        
        /// <summary>
        /// Gets or sets the ConnectionUri.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ConnectionUri.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::NSP.Common.Config.MessageQueueConfigurationElement.ConnectionUriPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string ConnectionUri
        {
            get
            {
                return ((string)(base[global::NSP.Common.Config.MessageQueueConfigurationElement.ConnectionUriPropertyName]));
            }
            set
            {
                base[global::NSP.Common.Config.MessageQueueConfigurationElement.ConnectionUriPropertyName] = value;
            }
        }
        #endregion
        
        #region ExchangeName Property
        /// <summary>
        /// The XML name of the <see cref="ExchangeName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string ExchangeNamePropertyName = "exchangeName";
        
        /// <summary>
        /// Gets or sets the ExchangeName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ExchangeName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::NSP.Common.Config.MessageQueueConfigurationElement.ExchangeNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string ExchangeName
        {
            get
            {
                return ((string)(base[global::NSP.Common.Config.MessageQueueConfigurationElement.ExchangeNamePropertyName]));
            }
            set
            {
                base[global::NSP.Common.Config.MessageQueueConfigurationElement.ExchangeNamePropertyName] = value;
            }
        }
        #endregion
        
        #region QueueName Property
        /// <summary>
        /// The XML name of the <see cref="QueueName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string QueueNamePropertyName = "queueName";
        
        /// <summary>
        /// Gets or sets the QueueName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        [global::System.ComponentModel.DescriptionAttribute("The QueueName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::NSP.Common.Config.MessageQueueConfigurationElement.QueueNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string QueueName
        {
            get
            {
                return ((string)(base[global::NSP.Common.Config.MessageQueueConfigurationElement.QueueNamePropertyName]));
            }
            set
            {
                base[global::NSP.Common.Config.MessageQueueConfigurationElement.QueueNamePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace NSP.Common.Config
{
    
    
    /// <summary>
    /// A collection of ServiceElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::NSP.Common.Config.ServiceElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::NSP.Common.Config.ServiceElementCollection.ServiceElementPropertyName)]
    public partial class ServiceElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::NSP.Common.Config.ServiceElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string ServiceElementPropertyName = "serviceElement";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        protected override string ElementName
        {
            get
            {
                return global::NSP.Common.Config.ServiceElementCollection.ServiceElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::NSP.Common.Config.ServiceElementCollection.ServiceElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::NSP.Common.Config.ServiceElement)(element)).Type;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::NSP.Common.Config.ServiceElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::NSP.Common.Config.ServiceElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::NSP.Common.Config.ServiceElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::NSP.Common.Config.ServiceElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::NSP.Common.Config.ServiceElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public global::NSP.Common.Config.ServiceElement this[int index]
        {
            get
            {
                return ((global::NSP.Common.Config.ServiceElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::NSP.Common.Config.ServiceElement"/> with the specified key.
        /// </summary>
        /// <param name="type">The key of the <see cref="global::NSP.Common.Config.ServiceElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public global::NSP.Common.Config.ServiceElement this[object type]
        {
            get
            {
                return ((global::NSP.Common.Config.ServiceElement)(base.BaseGet(type)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::NSP.Common.Config.ServiceElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="serviceElement">The <see cref="global::NSP.Common.Config.ServiceElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public void Add(global::NSP.Common.Config.ServiceElement serviceElement)
        {
            base.BaseAdd(serviceElement);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::NSP.Common.Config.ServiceElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="serviceElement">The <see cref="global::NSP.Common.Config.ServiceElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public void Remove(global::NSP.Common.Config.ServiceElement serviceElement)
        {
            base.BaseRemove(this.GetElementKey(serviceElement));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::NSP.Common.Config.ServiceElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::NSP.Common.Config.ServiceElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public global::NSP.Common.Config.ServiceElement GetItemAt(int index)
        {
            return ((global::NSP.Common.Config.ServiceElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::NSP.Common.Config.ServiceElement"/> with the specified key.
        /// </summary>
        /// <param name="type">The key of the <see cref="global::NSP.Common.Config.ServiceElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public global::NSP.Common.Config.ServiceElement GetItemByKey(string type)
        {
            return ((global::NSP.Common.Config.ServiceElement)(base.BaseGet(((object)(type)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace NSP.Common.Config
{
    
    
    /// <summary>
    /// The ServiceElement Configuration Element.
    /// </summary>
    public partial class ServiceElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Type Property
        /// <summary>
        /// The XML name of the <see cref="Type"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string TypePropertyName = "type";
        
        /// <summary>
        /// Gets or sets the Type.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Type.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::NSP.Common.Config.ServiceElement.TypePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Type
        {
            get
            {
                return ((string)(base[global::NSP.Common.Config.ServiceElement.TypePropertyName]));
            }
            set
            {
                base[global::NSP.Common.Config.ServiceElement.TypePropertyName] = value;
            }
        }
        #endregion
        
        #region InstanceId Property
        /// <summary>
        /// The XML name of the <see cref="InstanceId"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string InstanceIdPropertyName = "instanceId";
        
        /// <summary>
        /// Gets or sets the InstanceId.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        [global::System.ComponentModel.DescriptionAttribute("The InstanceId.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::NSP.Common.Config.ServiceElement.InstanceIdPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual string InstanceId
        {
            get
            {
                return ((string)(base[global::NSP.Common.Config.ServiceElement.InstanceIdPropertyName]));
            }
            set
            {
                base[global::NSP.Common.Config.ServiceElement.InstanceIdPropertyName] = value;
            }
        }
        #endregion
        
        #region Settings Property
        /// <summary>
        /// The XML name of the <see cref="Settings"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string SettingsPropertyName = "settings";
        
        /// <summary>
        /// Gets or sets the Settings.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Settings.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::NSP.Common.Config.ServiceElement.SettingsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::NSP.Common.Config.SettingElementCollection Settings
        {
            get
            {
                return ((global::NSP.Common.Config.SettingElementCollection)(base[global::NSP.Common.Config.ServiceElement.SettingsPropertyName]));
            }
            set
            {
                base[global::NSP.Common.Config.ServiceElement.SettingsPropertyName] = value;
            }
        }
        #endregion
        
        #region LocalCommandQueue Property
        /// <summary>
        /// The XML name of the <see cref="LocalCommandQueue"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string LocalCommandQueuePropertyName = "localCommandQueue";
        
        /// <summary>
        /// Gets or sets the LocalCommandQueue.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        [global::System.ComponentModel.DescriptionAttribute("The LocalCommandQueue.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::NSP.Common.Config.ServiceElement.LocalCommandQueuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::NSP.Common.Config.MessageQueueConfigurationElement LocalCommandQueue
        {
            get
            {
                return ((global::NSP.Common.Config.MessageQueueConfigurationElement)(base[global::NSP.Common.Config.ServiceElement.LocalCommandQueuePropertyName]));
            }
            set
            {
                base[global::NSP.Common.Config.ServiceElement.LocalCommandQueuePropertyName] = value;
            }
        }
        #endregion
        
        #region LocalEventQueue Property
        /// <summary>
        /// The XML name of the <see cref="LocalEventQueue"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string LocalEventQueuePropertyName = "localEventQueue";
        
        /// <summary>
        /// Gets or sets the LocalEventQueue.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        [global::System.ComponentModel.DescriptionAttribute("The LocalEventQueue.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::NSP.Common.Config.ServiceElement.LocalEventQueuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::NSP.Common.Config.MessageQueueConfigurationElement LocalEventQueue
        {
            get
            {
                return ((global::NSP.Common.Config.MessageQueueConfigurationElement)(base[global::NSP.Common.Config.ServiceElement.LocalEventQueuePropertyName]));
            }
            set
            {
                base[global::NSP.Common.Config.ServiceElement.LocalEventQueuePropertyName] = value;
            }
        }
        #endregion
    }
}
namespace NSP.Common.Config
{
    
    
    /// <summary>
    /// A collection of SettingElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::NSP.Common.Config.SettingElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::NSP.Common.Config.SettingElementCollection.SettingElementPropertyName)]
    public partial class SettingElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::NSP.Common.Config.SettingElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string SettingElementPropertyName = "settingElement";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        protected override string ElementName
        {
            get
            {
                return global::NSP.Common.Config.SettingElementCollection.SettingElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::NSP.Common.Config.SettingElementCollection.SettingElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::NSP.Common.Config.SettingElement)(element)).Key;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::NSP.Common.Config.SettingElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::NSP.Common.Config.SettingElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::NSP.Common.Config.SettingElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::NSP.Common.Config.SettingElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::NSP.Common.Config.SettingElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public global::NSP.Common.Config.SettingElement this[int index]
        {
            get
            {
                return ((global::NSP.Common.Config.SettingElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::NSP.Common.Config.SettingElement"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::NSP.Common.Config.SettingElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public global::NSP.Common.Config.SettingElement this[object key]
        {
            get
            {
                return ((global::NSP.Common.Config.SettingElement)(base.BaseGet(key)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::NSP.Common.Config.SettingElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="settingElement">The <see cref="global::NSP.Common.Config.SettingElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public void Add(global::NSP.Common.Config.SettingElement settingElement)
        {
            base.BaseAdd(settingElement);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::NSP.Common.Config.SettingElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="settingElement">The <see cref="global::NSP.Common.Config.SettingElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public void Remove(global::NSP.Common.Config.SettingElement settingElement)
        {
            base.BaseRemove(this.GetElementKey(settingElement));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::NSP.Common.Config.SettingElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::NSP.Common.Config.SettingElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public global::NSP.Common.Config.SettingElement GetItemAt(int index)
        {
            return ((global::NSP.Common.Config.SettingElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::NSP.Common.Config.SettingElement"/> with the specified key.
        /// </summary>
        /// <param name="key">The key of the <see cref="global::NSP.Common.Config.SettingElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public global::NSP.Common.Config.SettingElement GetItemByKey(float key)
        {
            return ((global::NSP.Common.Config.SettingElement)(base.BaseGet(((object)(key)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace NSP.Common.Config
{
    
    
    /// <summary>
    /// The SettingElement Configuration Element.
    /// </summary>
    public partial class SettingElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Key Property
        /// <summary>
        /// The XML name of the <see cref="Key"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string KeyPropertyName = "key";
        
        /// <summary>
        /// Gets or sets the Key.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Key.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::NSP.Common.Config.SettingElement.KeyPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual float Key
        {
            get
            {
                return ((float)(base[global::NSP.Common.Config.SettingElement.KeyPropertyName]));
            }
            set
            {
                base[global::NSP.Common.Config.SettingElement.KeyPropertyName] = value;
            }
        }
        #endregion
        
        #region Value Property
        /// <summary>
        /// The XML name of the <see cref="Value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        internal const string ValuePropertyName = "value";
        
        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.2.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Value.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::NSP.Common.Config.SettingElement.ValuePropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual float Value
        {
            get
            {
                return ((float)(base[global::NSP.Common.Config.SettingElement.ValuePropertyName]));
            }
            set
            {
                base[global::NSP.Common.Config.SettingElement.ValuePropertyName] = value;
            }
        }
        #endregion
    }
}
